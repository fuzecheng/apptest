import os
import shutil
import time
from pathlib import Path

import cv2
import numpy as np
from loguru import logger

from common.path import CACHE_PIC_DIR
from util.time_format import get_file_time_formate


def pic_result(img1, img2):
    """
        图片对比方法:
        :return图片对比结果，结果为0-1的数值，数值越大说明相似度越高，1的话则两张图片一致
    """
    # 读取两张图片
    img1 = cv2.imread(img1)
    img2 = cv2.imread(img2)

    # 计算直方图
    hist1 = cv2.calcHist([img1], [0], None, [256], [0, 256])
    hist2 = cv2.calcHist([img2], [0], None, [256], [0, 256])

    # 归一化直方图
    cv2.normalize(hist1, hist1)
    cv2.normalize(hist2, hist2)

    # 使用比较方法（如比较直方图的差异）
    diff = cv2.compareHist(hist1, hist2, cv2.HISTCMP_CORREL)  # 使用相关系数比较直方图
    if diff > 0.99:
        return 1
    else:
        return diff
    # print(f"直方图差异: {diff}")


def estimate_zoom_ratio(img1, img2):
    # 创建SIFT对象
    sift = cv2.xfeatures2d.SIFT_create()

    # 找到关键点
    kp1, des1 = sift.detectAndCompute(img1, None)
    kp2, des2 = sift.detectAndCompute(img2, None)

    # 匹配关键点
    matcher = cv2.BFMatcher()
    matches = matcher.knnMatch(des1, des2, k=2)

    # 选择最佳匹配
    good = [m for m, n in matches if m.distance < 0.8 * n.distance]

    # 计算焦距放大倍数
    if len(good) > 10:
        src_pts = np.float32([kp1[m.queryIdx].pt for m in good]).reshape(-1, 1, 2)
        dst_pts = np.float32([kp2[m.trainIdx].pt for m in good]).reshape(-1, 1, 2)
        M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC, 5.0)
        zoom_ratio = np.linalg.norm(M[:, 0]) / np.linalg.norm(M[:, 1])
        return zoom_ratio
    else:
        return None


def background_image_split(image_path: str, cut_save_path: str = None):
    """
    背景分割，将猛玛直播摄影图像抠出来
    :param image_path:
    :param cut_save_path:
    :return:
    """
    img = cv2.imread(image_path)
    # 将图像转换为灰度图像
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    background_gray_value = np.mean(gray[np.all(img == (32, 25, 28), axis=-1)])

    ret, binary = cv2.threshold(gray, background_gray_value, 255, cv2.THRESH_BINARY)
    # 创建UMat对象
    # mask_umat = cv2.UMat(mask)
    # 查找轮廓
    contours, hierarchy = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # 遍历轮廓，找到最大的矩形区域
    max_area = 0
    max_contour = None
    for contour in contours:
        x, y, w, h = cv2.boundingRect(contour)
        if max_area < w * h:
            max_area = w * h
            max_contour = contour

    if not Path(CACHE_PIC_DIR).exists():
        logger.info(f"create Dir :{CACHE_PIC_DIR}")
        os.makedirs(CACHE_PIC_DIR)
    # 提取矩形区域
    if max_contour is not None:
        x, y, w, h = cv2.boundingRect(max_contour)
        rectangle = img[y:y + h, x:x + w]
        save_path = cut_save_path if cut_save_path is not None else os.path.join(CACHE_PIC_DIR,
                                                                                 f"cut_image_{get_file_time_formate()}.jpg")
        cv2.imwrite(save_path, rectangle)
        return save_path
    else:
        return None


def validate_focus(origin_image, target_image):
    """
    验证图像是否对焦
    :param origin_image:
    :param target_image:
    """
    img1 = cv2.imread(origin_image)
    img2 = cv2.imread(target_image)
    logger.info(f"origin_image : {origin_image} ,{target_image}")
    # 将图片转换为灰度图
    gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
    gray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)

    # 使用AKAZE检测器检测关键点和描述符
    akaze = cv2.AKAZE_create()
    kp1, des1 = akaze.detectAndCompute(gray1, None)
    kp2, des2 = akaze.detectAndCompute(gray2, None)

    # 使用BFMatcher进行特征匹配并应用Lowe's ratio test
    bf = cv2.BFMatcher(cv2.NORM_HAMMING)
    matches = bf.knnMatch(des1, des2, k=2)
    good_matches = [m for m, n in matches if m.distance < 0.75 * n.distance]

    logger.info(f"Good matches count : {len(good_matches)}")

    # 如果有足够的匹配对，则继续计算单应性矩阵
    if len(good_matches) >= 4:
        kp1 = [kp1[m.queryIdx] for m in good_matches]
        kp2 = [kp2[m.trainIdx] for m in good_matches]
        pts1 = np.float32([kp.pt for kp in kp1]).reshape(-1, 1, 2)
        pts2 = np.float32([kp.pt for kp in kp2]).reshape(-1, 1, 2)

        # 计算单应性矩阵
        H, _ = cv2.findHomography(pts1, pts2, method=cv2.RANSAC)

        # 从单应性矩阵中提取缩放因子
        h1, h2, w1, w2 = H[0, 0], H[0, 1], H[1, 0], H[1, 1]
        scale = np.sqrt(h1 * h1 + w1 * w1) / np.sqrt(h2 * h2 + w2 * w2)

        logger.info(f"Scaling factor: {scale}")
    else:
        logger.warning("Not enough good matches to calculate homography.")


def get_image_black_pixels(image: str):
    """
    获取图像中黑色像素的黑白配比
    @param image:
    """
    if not Path(image).exists():
        raise Exception("Image is not exist!!!")
    img = cv2.imread(image)

    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # TODO 阴影处理

    # 应用OTSU阈值二值化
    _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    # 计算黑色像素（橙子）的数量
    black_pixels = np.sum(binary == 0)


    # 计算总像素数量
    total_pixels = binary.shape[0] * binary.shape[1]

    # 计算黑色像素占比
    percentage_black = black_pixels / total_pixels * 100

    binary_image_path = os.path.join(CACHE_PIC_DIR, f"binary_{get_file_time_formate()}.jpg")
    cv2.imwrite(binary_image_path, binary)
    # 输出占比
    logger.warning(f"黑色区域占比: {percentage_black:.2f}% ,image : f{binary_image_path}")
    return percentage_black


def is_static_image(image1, image2, pic_threshold: int = 1400):
    """
    判断两幅图像是否为静态图像。
    :param pic_threshold: 图像对比阈值 一般在1000-1500 越小越精确
    :param image1: 对比图片1
    :param image2: 对比图片2
    :return:
    """
    # 将两幅图像转换为灰度图像
    gray1 = cv2.cvtColor(cv2.imread(image1), cv2.COLOR_BGR2GRAY)
    gray2 = cv2.cvtColor(cv2.imread(image2), cv2.COLOR_BGR2GRAY)

    # 使用高斯滤波器进行模糊处理，以消除噪声
    blurred1 = cv2.GaussianBlur(gray1, (5, 5), 0)
    blurred2 = cv2.GaussianBlur(gray2, (5, 5), 0)

    # 使用 Canny 边缘检测器来检测图像边缘
    edges1 = cv2.Canny(blurred1, 30, 150)
    edges2 = cv2.Canny(blurred2, 30, 150)

    # 计算两幅图像的差异
    diff = np.abs(edges1 - edges2)

    # 设置阈值，过滤掉差异较小的像素点
    threshold = 50
    diff[diff < threshold] = 0

    # 计算差异像素点的数量
    static_pixel_count = np.count_nonzero(diff)

    # 如果差异像素点的数量小于某个阈值，则认为图像达到静止状态
    logger.warning(f" 差异像素 - > static_pixel_count : {static_pixel_count}")
    if static_pixel_count < pic_threshold:
        return True
    else:
        return False


def clear_pic_cache_dir():
    """
    清除图片缓存目录
    :return:
    """
    # 获取图片缓存目录
    # 检查目录是否存在
    if not os.path.exists(CACHE_PIC_DIR):
        return

    # 删除目录中的所有文件
    shutil.rmtree(CACHE_PIC_DIR)
